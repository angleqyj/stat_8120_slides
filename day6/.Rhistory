install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
mydb <- dbConnect(MySQL(),
user='root',
password='taylor1',
dbname='five_second',
host='ib')
mydb <- dbConnect(MySQL(),
user='root',
password='taylor1',
dbname='ib',
host='localhost')
?dbConnect
mydb <- dbConnect(MySQL(),
user='root',
password='taylor1',
dbname='ib',
host='localhost',
port = 3306)
d <- read.csv("~/Desktop/mes_data.csv")
head(d)
d <- read.csv("~/Desktop/mes_data.csv", header=F)
d <- read.csv("~/Desktop/mes_data.csv", header=F, sep = "\t")
head(d)
d[,1]
head(d[,1])
head(as.POSIXct(d[,1]))
head(d[,1])
d$dt <- as.POSIXct(d[,1]
)
head(d)
plot.ts(d[,7])
plot.ts(diff(d[,7]))
hist(diff(d[,7]))
table(diff(d[,7]))
plot.ts(diff(d[,7]))
plots.ts(d[,7])
plot.ts(d[,7])
acf(diff([,7]))
acf(diff(d[,7]))
head(d)
hour(d$dt)
typeof(d$dt)
class(d$dt)
d$dt$hour
library(lubridate)
lubridate::hour(d$dt)
unique(lubridate::hour(d$dt))
d[d$dt > "09:30:00",]
head(dt)
head(d)
?Date
Date(d[,1])
as.Date(d[,1])
head(d$dt)
window(d$dt, start = as.POSIXct("2019-11-26 09:30:00"), end = as.POSIXct("2019-11-26 16:15:00"))
?window
?zoo
library(zoo)
zoo(d[,7], order.by = d$dt)
head(d)
d <- zoo(d[,7], order.by = d$dt)
window(d, start = as.POSIXct("2019-11-26 09:30:00"), end = as.POSIXct("2019-11-26 16:15:00"))
myWind <- window(d, start = as.POSIXct("2019-11-26 09:30:00"), end = as.POSIXct("2019-11-26 16:15:00"))
nrow(d)
dim(D)
length(D)
length(d)
length(myWind)
window(d, start = as.POSIXct("2019-11-27 09:30:00"), end = as.POSIXct("2019-11-27 16:15:00"))
tail(window(d, start = as.POSIXct("2019-11-27 09:30:00"), end = as.POSIXct("2019-11-27 16:15:00")))
myWind2 <- window(d, start = as.POSIXct("2019-11-27 09:30:00"), end = as.POSIXct("2019-11-27 16:15:00"))
myWind1 <- window(d, start = as.POSIXct("2019-11-26 09:30:00"), end = as.POSIXct("2019-11-26 16:15:00"))
myWind2 <- window(d, start = as.POSIXct("2019-11-27 09:30:00"), end = as.POSIXct("2019-11-27 16:15:00"))
length(myWind1)
length(myWind2)
length(myWind2)*2
length(d)
plot(myWind)
plot(myWind1)
plot(myWind2)
plot(myWind1)
plot(myWind2)
diff(myWind1)
hist(diff(myWind1), breaks = seq(-.125*10, -.125*10, .125))
?hist(diff(myWind1), )
seq(-.125*10, -.125*10, .125)
seq(from = -.125*10, to = -.125*10, by = .125)
seq(from = -.125*10, to = .125*10, by = .125)
hist(diff(myWind1), breaks = seq(from = -.125*10, to = .125*10, by = .125))
hist(diff(myWind1), breaks = seq(from = -.125*15, to = .125*15, by = .125))
le_breaks <- seq(from = -.125*15, to = .125*15, by = .125)
hist(diff(myWind1), breaks = le_breaks + .01)
le_breaks <- seq(from = -.125*15, to = .125*15, by = .125/2)
hist(diff(myWind1), breaks = le_breaks)
le_breaks
table(diff(myWind1))
min(diff(myWind1))
min(diff(myWind1))/.125
c(abs(min(diff(myWind1))/.125), max(diff(myWind1))/.125 )
mostSteps <- max(c(abs(min(diff(myWind1))/.125), max(diff(myWind1))/.125 ))
mostSteps <- max(c(abs(min(diff(myWind1))/.125), max(diff(myWind1))/.125 ))
le_breaks <- seq(from = -.125*mostSteps, to = .125*mostSteps, by = .125/2)
hist(diff(myWind1), breaks = le_breaks)
makeHist <- function(myWind){
mostSteps <- max(c(abs(min(diff(myWind))/.125), max(diff(myWind))/.125 ))
le_breaks <- seq(from = -.125*mostSteps, to = .125*mostSteps, by = .125/2)
hist(diff(myWind), breaks = le_breaks)
}
makeHist(myWind1)
makeHist(myWind2)
makeHist <- function(myWind){
mostSteps <- max(c(abs(min(diff(myWind))/.125), max(diff(myWind))/.125 ))
cat(mostSteps)
le_breaks <- seq(from = -.125*mostSteps, to = .125*mostSteps, by = .125/2)
hist(diff(myWind), breaks = le_breaks)
}
makeHist(myWind2)
makeHist(myWind1)
library(depmix)
install.packages("depmixs4")
install.packages("depmixS4")
library(depmixS4)
?depmix
head(myWind1)
tmpDiffs <- diff(myWind1)
head(tmpDiffs)
as.data.frame(myWind1)
as.data.frame(diff(myWind1))
colnames(tmpDiffs)
colnames(tmpDiffs) <- "change"
tmpDiffs <- as.data.frame(diff(myWind1))
colnames(tmpDiffs) <- "change"
gaussian()
depmix(response = change ~ 1, data = tmpDiffs, nstates = 2, family = gaussian())
fit(mod, verbose = T)
mod <- depmix(response = change ~ 1, data = tmpDiffs, nstates = 2, family = gaussian())
fit(mod, verbose = T)
mod <- depmix(response = change ~ 1, data = tmpDiffs, nstates = 2, family = gaussian(), trstart = runif(2*2))
fit(mod, verbose = T)
data(speed)
head(speed)
?multinomial
depmix
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 2,
family = multinomial("identity"),
trstart = runif(2*2), )
fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
names(fitMod)
fitMod
posterior(fitMod)
plot(posterior(fitMod))
plot.ts(posterior(fitMod))
summary(fitMod)
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 3,
family = multinomial("identity"),
trstart = runif(2*2), )
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 3,
family = multinomial("identity"),
trstart = runif(3*3), )
fitMod <- fit(mod, verbose = T)
summary(fitMod)
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 2,
family = multinomial("identity"),
trstart = runif(2*2), )
fitMod <- fit(mod, verbose = T)
plot.ts(posterior(fitMod))
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 2,
family = multinomial("identity"),
trstart = runif(2*2), )
fitMod <- fit(mod, verbose = T)
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 2,
family = multinomial("identity"),
trstart = runif(2*2), )
fitMod <- fit(mod, verbose = T)
summary(fitMod)
plot.ts(posterior(fitMod))
table(posterior(fitMod))
class(posterior(fitMod))
dim(posterior(fitMod))
summary(fitMod)
fitMod <- fit(mod, verbose = T)
summary(fitMod)
fitMod <- fit(mod, verbose = T)
summary(fitMod)
plot.ts(posterior(fitMod))
fitMod <- fit(mod, verbose = T)
summary(fitMod)
# mod <- depmix(response = change ~ 1,
#               data = tmpDiffs,
#               nstates = 2,
#               family = multinomial("identity"),
#               trstart = runif(2*2))
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 2,
family = gaussian(),
trstart = runif(2*2))
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
fit
# mod <- depmix(response = change ~ 1,
#               data = tmpDiffs,
#               nstates = 2,
#               family = multinomial("identity"),
#               trstart = runif(2*2))
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 1,
family = gaussian(),
trstart = runif(1))
fitMod <- fit(mod, verbose = T)
head(tmpDiffs)
is.na(tmpDiffs)
sum(is.na(tmpDiffs))
?gaussian
# mod <- depmix(response = change ~ 1,
#               data = tmpDiffs,
#               nstates = 2,
#               family = multinomial("identity"),
#               trstart = runif(2*2))
mod <- depmix(response = change ~ 1,
data = tmpDiffs,
nstates = 1,
family = gaussian(),
trstart = runif(1))
fitMod <- fit(mod, verbose = T)
fitMod <- fit(mod, verbose = T)
traceback()
